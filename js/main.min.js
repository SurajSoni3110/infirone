"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!function (t, o, e) {
  var i = {
    animation: "fade",
    arrow: !0,
    arrowColor: "",
    autoClose: !0,
    content: null,
    contentAsHTML: !1,
    contentCloning: !0,
    debug: !0,
    delay: 200,
    minWidth: 0,
    maxWidth: null,
    functionInit: function functionInit(t, o) {},
    functionBefore: function functionBefore(t, o) {
      o();
    },
    functionReady: function functionReady(t, o) {},
    functionAfter: function functionAfter(t) {},
    hideOnClick: !1,
    icon: "(?)",
    iconCloning: !0,
    iconDesktop: !1,
    iconTouch: !1,
    iconTheme: "tooltipster-icon",
    interactive: !1,
    interactiveTolerance: 350,
    multiple: !1,
    offsetX: 0,
    offsetY: 0,
    onlyOne: !1,
    position: "top",
    positionTracker: !1,
    positionTrackerCallback: function positionTrackerCallback(t) {
      "hover" == this.option("trigger") && this.option("autoClose") && this.hide();
    },
    restoration: "current",
    speed: 350,
    timer: 0,
    theme: "tooltipster-default",
    touchDevices: !0,
    trigger: "hover",
    updateAnimation: !0
  };

  function n(o, e) {
    this.bodyOverflowX, this.callbacks = {
      hide: [],
      show: []
    }, this.checkInterval = null, this.Content, this.$el = t(o), this.$elProxy, this.elProxyPosition, this.enabled = !0, this.options = t.extend({}, i, e), this.mouseIsOverProxy = !1, this.namespace = "tooltipster-" + Math.round(1e5 * Math.random()), this.Status = "hidden", this.timerHide = null, this.timerShow = null, this.$tooltip, this.options.iconTheme = this.options.iconTheme.replace(".", ""), this.options.theme = this.options.theme.replace(".", ""), this._init();
  }

  function s(o, e) {
    var i = !0;
    return t.each(o, function (t, n) {
      if (void 0 === e[t] || o[t] !== e[t]) return i = !1, !1;
    }), i;
  }

  n.prototype = {
    _init: function _init() {
      var o = this;

      if (e.querySelector) {
        var i = null;
        void 0 === o.$el.data("tooltipster-initialTitle") && (void 0 === (i = o.$el.attr("title")) && (i = null), o.$el.data("tooltipster-initialTitle", i)), null !== o.options.content ? o._content_set(o.options.content) : o._content_set(i);
        var n = o.options.functionInit.call(o.$el, o.$el, o.Content);
        void 0 !== n && o._content_set(n), o.$el.removeAttr("title").addClass("tooltipstered"), !r && o.options.iconDesktop || r && o.options.iconTouch ? ("string" == typeof o.options.icon ? (o.$elProxy = t('<span class="' + o.options.iconTheme + '"></span>'), o.$elProxy.text(o.options.icon)) : o.options.iconCloning ? o.$elProxy = o.options.icon.clone(!0) : o.$elProxy = o.options.icon, o.$elProxy.insertAfter(o.$el)) : o.$elProxy = o.$el, "hover" == o.options.trigger ? (o.$elProxy.on("mouseenter." + o.namespace, function () {
          a() && !o.options.touchDevices || (o.mouseIsOverProxy = !0, o._show());
        }).on("mouseleave." + o.namespace, function () {
          a() && !o.options.touchDevices || (o.mouseIsOverProxy = !1);
        }), r && o.options.touchDevices && o.$elProxy.on("touchstart." + o.namespace, function () {
          o._showNow();
        })) : "click" == o.options.trigger && o.$elProxy.on("click." + o.namespace, function () {
          a() && !o.options.touchDevices || o._show();
        });
      }
    },
    _show: function _show() {
      var t = this;
      "shown" != t.Status && "appearing" != t.Status && (t.options.delay ? t.timerShow = setTimeout(function () {
        ("click" == t.options.trigger || "hover" == t.options.trigger && t.mouseIsOverProxy) && t._showNow();
      }, t.options.delay) : t._showNow());
    },
    _showNow: function _showNow(e) {
      var i = this;
      i.options.functionBefore.call(i.$el, i.$el, function () {
        if (i.enabled && null !== i.Content) {
          e && i.callbacks.show.push(e), i.callbacks.hide = [], clearTimeout(i.timerShow), i.timerShow = null, clearTimeout(i.timerHide), i.timerHide = null, i.options.onlyOne && t(".tooltipstered").not(i.$el).each(function (o, e) {
            var i = t(e),
                n = i.data("tooltipster-ns");
            t.each(n, function (t, o) {
              var e = i.data(o),
                  n = e.status(),
                  s = e.option("autoClose");
              "hidden" !== n && "disappearing" !== n && s && e.hide();
            });
          });

          var n = function n() {
            i.Status = "shown", t.each(i.callbacks.show, function (t, o) {
              o.call(i.$el);
            }), i.callbacks.show = [];
          };

          if ("hidden" !== i.Status) {
            var s = 0;
            "disappearing" === i.Status ? (i.Status = "appearing", p() ? (i.$tooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-" + i.options.animation + "-show"), i.options.speed > 0 && i.$tooltip.delay(i.options.speed), i.$tooltip.queue(n)) : i.$tooltip.stop().fadeIn(n)) : "shown" === i.Status && n();
          } else {
            i.Status = "appearing";
            s = i.options.speed;
            i.bodyOverflowX = t("body").css("overflow-x"), t("body").css("overflow-x", "hidden");
            var l = "tooltipster-" + i.options.animation,
                a = "-webkit-transition-duration: " + i.options.speed + "ms; -webkit-animation-duration: " + i.options.speed + "ms; -moz-transition-duration: " + i.options.speed + "ms; -moz-animation-duration: " + i.options.speed + "ms; -o-transition-duration: " + i.options.speed + "ms; -o-animation-duration: " + i.options.speed + "ms; -ms-transition-duration: " + i.options.speed + "ms; -ms-animation-duration: " + i.options.speed + "ms; transition-duration: " + i.options.speed + "ms; animation-duration: " + i.options.speed + "ms;",
                f = i.options.minWidth ? "min-width:" + Math.round(i.options.minWidth) + "px;" : "",
                d = i.options.maxWidth ? "max-width:" + Math.round(i.options.maxWidth) + "px;" : "",
                c = i.options.interactive ? "pointer-events: auto;" : "";
            if (i.$tooltip = t('<div class="tooltipster-base tooltipster-sidetip ' + i.options.theme + " tooltipster-" + i.options.position + '" style="' + f + " " + d + " " + c + " " + a + '"><div class="tooltipster-box"><div class="tooltipster-content"></div></div></div>'), p() && i.$tooltip.addClass(l), i._content_insert(), i.$tooltip.appendTo("body"), i.reposition(), i.options.functionReady.call(i.$el, i.$el, i.$tooltip), p() ? (i.$tooltip.addClass(l + "-show"), i.options.speed > 0 && i.$tooltip.delay(i.options.speed), i.$tooltip.queue(n)) : i.$tooltip.css("display", "none").fadeIn(i.options.speed, n), i._interval_set(), t(o).on("scroll." + i.namespace + " resize." + i.namespace, function () {
              i.reposition();
            }), i.options.autoClose) if (t("body").off("." + i.namespace), "hover" == i.options.trigger) {
              if (r && setTimeout(function () {
                t("body").on("touchstart." + i.namespace, function () {
                  i.hide();
                });
              }, 0), i.options.interactive) {
                r && i.$tooltip.on("touchstart." + i.namespace, function (t) {
                  t.stopPropagation();
                });
                var h = null;
                i.$elProxy.add(i.$tooltip).on("mouseleave." + i.namespace + "-autoClose", function () {
                  clearTimeout(h), h = setTimeout(function () {
                    i.hide();
                  }, i.options.interactiveTolerance);
                }).on("mouseenter." + i.namespace + "-autoClose", function () {
                  clearTimeout(h);
                });
              } else i.$elProxy.on("mouseleave." + i.namespace + "-autoClose", function () {
                i.hide();
              });

              i.options.hideOnClick && i.$elProxy.on("click." + i.namespace + "-autoClose", function () {
                i.hide();
              });
            } else "click" == i.options.trigger && (setTimeout(function () {
              t("body").on("click." + i.namespace + " touchstart." + i.namespace, function () {
                i.hide();
              });
            }, 0), i.options.interactive && i.$tooltip.on("click." + i.namespace + " touchstart." + i.namespace, function (t) {
              t.stopPropagation();
            }));
          }

          i.options.timer > 0 && (i.timerHide = setTimeout(function () {
            i.timerHide = null, i.hide();
          }, i.options.timer + s));
        }
      });
    },
    _interval_set: function _interval_set() {
      var o = this;
      o.checkInterval = setInterval(function () {
        if (0 === t("body").find(o.$el).length || 0 === t("body").find(o.$elProxy).length || "hidden" == o.Status || 0 === t("body").find(o.$tooltip).length) "shown" != o.Status && "appearing" != o.Status || o.hide(), o._interval_cancel();else if (o.options.positionTracker) {
          var e = o._repositionInfo(o.$elProxy),
              i = !1;

          s(e.dimension, o.elProxyPosition.dimension) && ("fixed" === o.$elProxy.css("position") ? s(e.position, o.elProxyPosition.position) && (i = !0) : s(e.offset, o.elProxyPosition.offset) && (i = !0)), i || (o.reposition(), o.options.positionTrackerCallback.call(o, o.$el));
        }
      }, 200);
    },
    _interval_cancel: function _interval_cancel() {
      clearInterval(this.checkInterval), this.checkInterval = null;
    },
    _content_set: function _content_set(t) {
      "object" == _typeof(t) && null !== t && this.options.contentCloning && (t = t.clone(!0)), this.Content = t;
    },
    _content_insert: function _content_insert() {
      var t = this,
          o = this.$tooltip.find(".tooltipster-content");
      "string" != typeof t.Content || t.options.contentAsHTML ? o.empty().append(t.Content) : o.text(t.Content);
    },
    _update: function _update(t) {
      var o = this;
      o._content_set(t), null !== o.Content ? "hidden" !== o.Status && (o._content_insert(), o.reposition(), o.options.updateAnimation && (p() ? (o.$tooltip.css({
        width: "",
        "-webkit-transition": "all " + o.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
        "-moz-transition": "all " + o.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
        "-o-transition": "all " + o.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
        "-ms-transition": "all " + o.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
        transition: "all " + o.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms"
      }).addClass("tooltipster-content-changing"), setTimeout(function () {
        "hidden" != o.Status && (o.$tooltip.removeClass("tooltipster-content-changing"), setTimeout(function () {
          "hidden" !== o.Status && o.$tooltip.css({
            "-webkit-transition": o.options.speed + "ms",
            "-moz-transition": o.options.speed + "ms",
            "-o-transition": o.options.speed + "ms",
            "-ms-transition": o.options.speed + "ms",
            transition: o.options.speed + "ms"
          });
        }, o.options.speed));
      }, o.options.speed)) : o.$tooltip.fadeTo(o.options.speed, .5, function () {
        "hidden" != o.Status && o.$tooltip.fadeTo(o.options.speed, 1);
      }))) : o.hide();
    },
    _repositionInfo: function _repositionInfo(t) {
      return {
        dimension: {
          height: t.outerHeight(!1),
          width: t.outerWidth(!1)
        },
        offset: t.offset(),
        position: {
          left: parseInt(t.css("left")),
          top: parseInt(t.css("top"))
        }
      };
    },
    hide: function hide(e) {
      var i = this;
      e && i.callbacks.hide.push(e), i.callbacks.show = [], clearTimeout(i.timerShow), i.timerShow = null, clearTimeout(i.timerHide), i.timerHide = null;

      var n = function n() {
        t.each(i.callbacks.hide, function (t, o) {
          o.call(i.$el);
        }), i.callbacks.hide = [];
      };

      if ("shown" == i.Status || "appearing" == i.Status) {
        i.Status = "disappearing";

        var s = function s() {
          i.Status = "hidden", "object" == _typeof(i.Content) && null !== i.Content && i.Content.detach(), i.$tooltip.remove(), i.$tooltip = null, t(o).off("." + i.namespace), t("body").off("." + i.namespace).css("overflow-x", i.bodyOverflowX), t("body").off("." + i.namespace), i.$elProxy.off("." + i.namespace + "-autoClose"), i.options.functionAfter.call(i.$el, i.$el), n();
        };

        p() ? (i.$tooltip.clearQueue().removeClass("tooltipster-" + i.options.animation + "-show").addClass("tooltipster-dying"), i.options.speed > 0 && i.$tooltip.delay(i.options.speed), i.$tooltip.queue(s)) : i.$tooltip.stop().fadeOut(i.options.speed, s);
      } else "hidden" == i.Status && n();

      return i;
    },
    show: function show(t) {
      return this._showNow(t), this;
    },
    update: function update(t) {
      return this.content(t);
    },
    content: function content(t) {
      return void 0 === t ? this.Content : (this._update(t), this);
    },
    reposition: function reposition() {
      var e = this;

      if (0 !== t("body").find(e.$tooltip).length) {
        var M = function M() {
          var e = t(o).scrollLeft();
          _ - e < 0 && (i = _ - e, _ = e), _ + r - e > n && (i = _ - (n + e - r), _ = n + e - r);
        };

        var D = function D(e, i) {
          s.offset.top - t(o).scrollTop() - l - S - 12 < 0 && i.indexOf("top") > -1 && (H = e), s.offset.top + s.dimension.height + l + 12 + S > t(o).scrollTop() + t(o).height() && i.indexOf("bottom") > -1 && (H = e, I = s.offset.top - l - S - 12);
        };

        e.$tooltip.css("width", ""), e.elProxyPosition = e._repositionInfo(e.$elProxy);
        var i = null,
            n = t(o).width(),
            s = e.elProxyPosition,
            r = e.$tooltip.outerWidth(!1),
            l = (e.$tooltip.innerWidth(), e.$tooltip.outerHeight(!1));

        if (e.$elProxy.is("area")) {
          var a = e.$elProxy.attr("shape"),
              p = e.$elProxy.parent().attr("name"),
              f = t('img[usemap="#' + p + '"]'),
              d = f.offset().left,
              c = f.offset().top,
              h = void 0 !== e.$elProxy.attr("coords") ? e.$elProxy.attr("coords").split(",") : void 0;

          if ("circle" == a) {
            var u = parseInt(h[0]),
                m = parseInt(h[1]),
                v = parseInt(h[2]);
            s.dimension.height = 2 * v, s.dimension.width = 2 * v, s.offset.top = c + m - v, s.offset.left = d + u - v;
          } else if ("rect" == a) {
            u = parseInt(h[0]), m = parseInt(h[1]);
            var $ = parseInt(h[2]),
                g = parseInt(h[3]);
            s.dimension.height = g - m, s.dimension.width = $ - u, s.offset.top = c + m, s.offset.left = d + u;
          } else if ("poly" == a) {
            for (var w = 0, y = 0, b = 0, x = 0, C = "even", P = 0; P < h.length; P++) {
              var T = parseInt(h[P]);
              "even" == C ? (T > b && (b = T, 0 === P && (w = b)), T < w && (w = T), C = "odd") : (T > x && (x = T, 1 == P && (y = x)), T < y && (y = T), C = "even");
            }

            s.dimension.height = x - y, s.dimension.width = b - w, s.offset.top = c + y, s.offset.left = d + w;
          } else s.dimension.height = f.outerHeight(!1), s.dimension.width = f.outerWidth(!1), s.offset.top = c, s.offset.left = d;
        }

        var _ = 0,
            k = 0,
            I = 0,
            S = parseInt(e.options.offsetY),
            O = parseInt(e.options.offsetX),
            H = e.options.position;

        if ("top" == H) {
          var W = s.offset.left + r - (s.offset.left + s.dimension.width);
          _ = s.offset.left + O - W / 2, I = s.offset.top - l - S - 12, M(), D("bottom", "top");
        }

        if ("top-left" == H && (_ = s.offset.left + O, I = s.offset.top - l - S - 12, M(), D("bottom-left", "top-left")), "top-right" == H && (_ = s.offset.left + s.dimension.width + O - r, I = s.offset.top - l - S - 12, M(), D("bottom-right", "top-right")), "bottom" == H) {
          W = s.offset.left + r - (s.offset.left + s.dimension.width);
          _ = s.offset.left - W / 2 + O, I = s.offset.top + s.dimension.height + S + 12, M(), D("top", "bottom");
        }

        if ("bottom-left" == H && (_ = s.offset.left + O, I = s.offset.top + s.dimension.height + S + 12, M(), D("top-left", "bottom-left")), "bottom-right" == H && (_ = s.offset.left + s.dimension.width + O - r, I = s.offset.top + s.dimension.height + S + 12, M(), D("top-right", "bottom-right")), "left" == H) {
          _ = s.offset.left - O - r - 12, k = s.offset.left + O + s.dimension.width + 12;
          var A = s.offset.top + l - (s.offset.top + s.dimension.height);

          if (I = s.offset.top - A / 2 - S, _ < 0 && k + r > n) {
            var z = 2 * parseFloat(e.$tooltip.css("border-width")),
                F = r + _ - z;
            e.$tooltip.css("width", F + "px"), l = e.$tooltip.outerHeight(!1), _ = s.offset.left - O - F - 12 - z, A = s.offset.top + l - (s.offset.top + s.dimension.height), I = s.offset.top - A / 2 - S;
          } else _ < 0 && (_ = s.offset.left + O + s.dimension.width + 12, i = "left");
        }

        if ("right" == H) {
          _ = s.offset.left + O + s.dimension.width + 12, k = s.offset.left - O - r - 12;
          A = s.offset.top + l - (s.offset.top + s.dimension.height);

          if (I = s.offset.top - A / 2 - S, _ + r > n && k < 0) {
            z = 2 * parseFloat(e.$tooltip.css("border-width")), F = n - _ - z;
            e.$tooltip.css("width", F + "px"), l = e.$tooltip.outerHeight(!1), A = s.offset.top + l - (s.offset.top + s.dimension.height), I = s.offset.top - A / 2 - S;
          } else _ + r > n && (_ = s.offset.left - O - r - 12, i = "right");
        }

        if (e.options.arrow) {
          var N = "tooltipster-arrow-" + H;
          if (e.options.arrowColor.length < 1) e.$tooltip.css("background-color");else e.options.arrowColor;
          if (i ? "left" == i ? (N = "tooltipster-arrow-right", i = "") : "right" == i ? (N = "tooltipster-arrow-left", i = "") : i = "left:" + Math.round(i) + "px;" : i = "", "top" == H || "top-left" == H || "top-right" == H) var X = parseFloat(e.$tooltip.css("border-bottom-width")),
              q = e.$tooltip.css("border-bottom-color");else if ("bottom" == H || "bottom-left" == H || "bottom-right" == H) X = parseFloat(e.$tooltip.css("border-top-width")), q = e.$tooltip.css("border-top-color");else if ("left" == H) X = parseFloat(e.$tooltip.css("border-right-width")), q = e.$tooltip.css("border-right-color");else if ("right" == H) X = parseFloat(e.$tooltip.css("border-left-width")), q = e.$tooltip.css("border-left-color");else X = parseFloat(e.$tooltip.css("border-bottom-width")), q = e.$tooltip.css("border-bottom-color");
          X > 1 && X++;
          var j = "";

          if (0 !== X) {
            var E = "",
                L = "border-color: " + q + ";";
            -1 !== N.indexOf("bottom") ? E = "margin-top: -" + Math.round(X) + "px;" : -1 !== N.indexOf("top") ? E = "margin-bottom: -" + Math.round(X) + "px;" : -1 !== N.indexOf("left") ? E = "margin-right: -" + Math.round(X) + "px;" : -1 !== N.indexOf("right") && (E = "margin-left: -" + Math.round(X) + "px;"), j = '<span class="tooltipster-arrow-border" style="' + E + " " + L + ';"></span>';
          }

          e.$tooltip.find(".tooltipster-arrow").remove();
          var Q = '<div class="' + N + ' tooltipster-arrow" style="' + i + '">' + j + '<div class="tooltipster-arrow-uncropped"><div class="tooltipster-arrow-border"></div><div class="tooltipster-arrow-background"></div></div></div>';
          e.$tooltip.append(Q);
        }

        e.$tooltip.css({
          top: Math.round(I) + "px",
          left: Math.round(_) + "px"
        });
      }

      return e;
    },
    enable: function enable() {
      return this.enabled = !0, this;
    },
    disable: function disable() {
      return this.hide(), this.enabled = !1, this;
    },
    destroy: function destroy() {
      var o = this;
      o.hide(), o.$el[0] !== o.$elProxy[0] && o.$elProxy.remove(), o.$el.removeData(o.namespace).off("." + o.namespace);
      var e = o.$el.data("tooltipster-ns");

      if (1 === e.length) {
        var i = null;
        "previous" === o.options.restoration ? i = o.$el.data("tooltipster-initialTitle") : "current" === o.options.restoration && (i = "string" == typeof o.Content ? o.Content : t("<div></div>").append(o.Content).html()), i && o.$el.attr("title", i), o.$el.removeClass("tooltipstered").removeData("tooltipster-ns").removeData("tooltipster-initialTitle");
      } else e = t.grep(e, function (t, e) {
        return t !== o.namespace;
      }), o.$el.data("tooltipster-ns", e);

      return o;
    },
    elementIcon: function elementIcon() {
      return this.$el[0] !== this.$elProxy[0] ? this.$elProxy[0] : void 0;
    },
    elementTooltip: function elementTooltip() {
      return this.$tooltip ? this.$tooltip[0] : void 0;
    },
    option: function option(t, o) {
      return void 0 === o ? this.options[t] : (this.options[t] = o, this);
    },
    status: function status() {
      return this.Status;
    }
  }, t.fn.tooltipster = function () {
    var o = arguments;

    if (0 === this.length) {
      if ("string" == typeof o[0]) {
        var e = !0;
        if ("setDefaults" === o[0]) t.extend(i, o[1]);else e = !1;
        return !!e || this;
      }

      return this;
    }

    if ("string" == typeof o[0]) {
      var s = "#*$~&";
      return this.each(function () {
        var e = t(this).data("tooltipster-ns"),
            i = e ? t(this).data(e[0]) : null;
        if (!i) throw new Error("You called Tooltipster's \"" + o[0] + '" method on an uninitialized element');
        if ("function" != typeof i[o[0]]) throw new Error('Unknown method .tooltipster("' + o[0] + '")');
        var n = i[o[0]](o[1], o[2]);
        if (n !== i) return s = n, !1;
      }), "#*$~&" !== s ? s : this;
    }

    var r = [],
        l = o[0] && void 0 !== o[0].multiple,
        a = l && o[0].multiple || !l && i.multiple,
        p = o[0] && void 0 !== o[0].debug,
        f = p && o[0].debug || !p && i.debug;
    return this.each(function () {
      var e = !1,
          i = t(this).data("tooltipster-ns"),
          s = null;
      i ? a ? e = !0 : f && console.log('Tooltipster: one or more tooltips are already attached to this element: ignoring. Use the "multiple" option to attach more tooltips.') : e = !0, e && (s = new n(this, o[0]), i || (i = []), i.push(s.namespace), t(this).data("tooltipster-ns", i), t(this).data(s.namespace, s)), r.push(s);
    }), a ? r : this;
  };
  var r = !!("ontouchstart" in o),
      l = !1;

  function a() {
    return !l && r;
  }

  function p() {
    var t = (e.body || e.documentElement).style,
        o = "transition";
    if ("string" == typeof t[o]) return !0;
    v = ["Moz", "Webkit", "Khtml", "O", "ms"], o = o.charAt(0).toUpperCase() + o.substr(1);

    for (var i = 0; i < v.length; i++) {
      if ("string" == typeof t[v[i] + o]) return !0;
    }

    return !1;
  }

  t("body").one("mousemove", function () {
    l = !0;
  });
}(jQuery, window, document);
"use strict";

jQuery(document).ready(function (e) {
  var t = window.matchMedia("(max-width: 767px)"),
      s = window.matchMedia("(min-width:767px) and (max-width: 1279px)"),
      i = window.matchMedia("(min-width: 1280px)");

  function r(t) {
    if (t.matches) {
      if (UIkit.nav(".header .menu", {
        duration: 500
      }), e(".servises_slider").length && (e(".servises_slider > div").addClass("uk-slider-items"), UIkit.slider(".servises_slider", {
        autoplay: !1,
        finite: !1,
        draggable: !0
      })), e(".blog-articles-slider").length && (e(".blog-articles-slider > div").addClass("uk-slider-items"), UIkit.slider(".blog-articles-slider", {
        autoplay: !1,
        finite: !1,
        draggable: !0
      })), e(".we-invest-slider").length && (e(".we-invest-slider > div").addClass("uk-slider-items"), UIkit.slider(".we-invest-slider", {
        autoplay: !1,
        finite: !1,
        draggable: !0
      })), e(".tiles-slider").length && (e(".tiles-slider > div").addClass("uk-slider-items"), UIkit.slider(".tiles-slider", {
        autoplay: !1,
        finite: !1,
        draggable: !0
      })), e(".tm-blog-categories-slider").length) {
        e(".tm-blog-categories-slider > div").addClass("uk-slider-items"), UIkit.slider(".tm-blog-categories-slider", {
          autoplay: !1,
          finite: !1,
          draggable: !0
        });

        var _t = e(".tm-blog-categories-slider .uk-slider-items .tm-active").index();

        if (-1 !== _t) {
          UIkit.slider(".tm-blog-categories-slider").show(_t);
        }
      }

      e(".advantage__card").attr("uk-scrollspy", "cls: uk-animation-fade; delay: 300; offset-top: -100"), g(), e('a[href^="#"]').on("click", function (t) {
        e(this.hash).length > 0 && 1 == this.hash.indexOf("modal-media") && function (e) {
          var t = e;
          t.requestFullscreen ? t.requestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.msRequestFullscreen && t.msRequestFullscreen();
        }(e(this.hash + " video")[0]);
      }), o(!1);
    }
  }

  function l(t) {
    t.matches && (UIkit.nav(".header .menu", {
      duration: 500
    }), e(".servises_slider").length && (UIkit.slider(".servises_slider").$destroy(), e(".servises_slider").removeClass("uk-slider"), e(".servises_slider .uk-slider-items").removeClass("uk-slider-items"), e(".servises_slider .service").css("transform", "translate3d(0px, 0px, 0px)")), e(".blog-articles-slider").length && (e(".blog-articles-slider > div").addClass("uk-slider-items"), UIkit.slider(".blog-articles-slider", {
      autoplay: !1,
      finite: !1,
      draggable: !0
    })), e(".we-invest-slider").length && (e(".we-invest-slider > div").addClass("uk-slider-items"), UIkit.slider(".we-invest-slider", {
      autoplay: !1,
      finite: !1,
      draggable: !0
    })), e(".tiles-slider").length && (UIkit.slider(".tiles-slider").$destroy(), e(".tiles-slider").removeClass("uk-slider"), e(".tiles-slider .uk-slider-items").removeClass("uk-slider-items"), e(".tiles-slider > div").css("transform", "translate3d(0px, 0px, 0px)")), e(".tm-blog-categories-slider").length && (UIkit.slider(".tm-blog-categories-slider").$destroy(), e(".tm-blog-categories-slider").removeClass("uk-slider"), e(".tm-blog-categories-slider").removeClass("uk-slider-container"), e(".tm-blog-categories-slider .uk-slider-items").removeClass("uk-slider-items"), e(".tm-blog-categories-slider > div").css("transform", "translate3d(0px, 0px, 0px)")), g(), o(!0));
  }

  function a(t) {
    t.matches && (UIkit.nav(".header .menu").$destroy(), e(".header .menu .uk-nav-sub").removeAttr("hidden"), e(".servises_slider").length && (UIkit.slider(".servises_slider").$destroy(), e(".servises_slider").removeClass("uk-slider"), e(".servises_slider .uk-slider-items").removeClass("uk-slider-items"), e(".servises_slider .service").css("transform", "translate3d(0px, 0px, 0px)")), e(".blog-articles-slider").length && (UIkit.slider(".blog-articles-slider").$destroy(), e(".blog-articles-slider").removeClass("uk-slider"), e(".blog-articles-slider .uk-slider-items").removeClass("uk-slider-items"), e(".blog-articles-slider .service").css("transform", "translate3d(0px, 0px, 0px)")), e(".we-invest-slider").length && (UIkit.slider(".we-invest-slider").$destroy(), e(".we-invest-slider").removeClass("uk-slider"), e(".we-invest-slider .uk-slider-items").removeClass("uk-slider-items"), e(".we-invest-slider .we-invest-items").css("transform", "translate3d(0px, 0px, 0px)")), e(".tiles-slider").length && (UIkit.slider(".tiles-slider").$destroy(), e(".tiles-slider").removeClass("uk-slider"), e(".tiles-slider .uk-slider-items").removeClass("uk-slider-items"), e(".tiles-slider > div").css("transform", "translate3d(0px, 0px, 0px)")), e(".tm-blog-categories-slider").length && (UIkit.slider(".tm-blog-categories-slider").$destroy(), e(".tm-blog-categories-slider").removeClass("uk-slider"), e(".tm-blog-categories-slider .uk-slider-items").removeClass("uk-slider-items"), e(".tm-blog-categories-slider > div").css("transform", "translate3d(0px, 0px, 0px)")), g(), o(!0));
  }

  function o(e) {
    document.querySelectorAll("video.preload-src").forEach(function (t) {
      t.querySelectorAll("source").forEach(function (s) {
        e && s.hasAttribute("data-src") ? (s.setAttribute("src", s.getAttribute("data-src")), s.removeAttribute("data-src"), t.load()) : !e && s.hasAttribute("src") && (s.setAttribute("data-src", s.getAttribute("src")), s.removeAttribute("src"));
      });
    });
  }

  t.addListener(r), s.addListener(l), i.addListener(a), r(t), l(s), a(i), document.querySelectorAll("[id^='modal-media-youtube_review_']").forEach(function (e) {
    var t = UIkit.modal(e);
    t && t.$el && t.$el.addEventListener("beforeshow", function () {
      o(!0);
    });
  });
  var n = document.querySelectorAll("img[data-scrollspy]");

  function d(e) {
    e.setAttribute("uk-scrollspy", e.dataset.scrollspy), e.removeAttribute("data-scrollspy");
  }

  [].forEach.call(n, function (e) {
    e.complete ? d(e) : e.onload = function () {
      d(e);
    };
  });
  var c = document.querySelectorAll(".uk-slideshow-item__hero img");

  function u(e) {
    var t = e.parentElement.parentElement.parentElement;
    t.querySelector(".large-cycle").setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium; delay: 800; repeat: true;"), t.querySelector(".small-cycle").setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium; delay: 800; repeat: true;"), t.querySelector(".uk-slideshow-item__hero").setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium mk-animation-img-mask; delay: 1100; repeat: true;");
    var s = document.querySelector(".uk-slideshow-item__hero_extra");
    null !== s && s.setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium mk-animation-img-mask; delay: 1300; repeat: true;");
  }

  [].forEach.call(c, function (e) {
    e.complete ? u(e) : e.onload = function () {
      u(e);
    };
  });
  var m = document.querySelectorAll(".uk-slideshow-item__cover");
  [].forEach.call(m, function (e) {
    e.complete ? e.setAttribute("uk-scrollspy", "cls: uk-animation-fade;") : e.onload = function () {
      e.setAttribute("uk-scrollspy", "cls: uk-animation-fade;");
    };
  });
  var h = document.querySelectorAll(".case__hero img");
  [].forEach.call(h, function (e) {
    if (e.complete) {
      e.parentElement.parentElement.setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium; delay: 500;");
    } else e.onload = function () {
      e.parentElement.parentElement.setAttribute("uk-scrollspy", "cls: uk-animation-slide-bottom-medium; delay: 500;");
    };
  });
  var p = document.querySelectorAll(".work-hero__main-image img");
  [].forEach.call(p, function (e) {
    e.complete ? e.parentElement.setAttribute("uk-scrollspy", "cls: uk-animation-fade;") : e.onload = function () {
      e.parentElement.setAttribute("uk-scrollspy", "cls: uk-animation-fade;");
    };
  }), e(".client-info__review-wrapper").on("click", function () {
    e(this).parents(".client-info.mk-opened").length > 0 ? e(this).parents(".client-info").removeClass("mk-opened") : e(this).parents(".client-info").addClass("mk-opened");
  });
  var v = e("#header").offset().top;

  function f() {
    var t = e(".header");
    e(window).scrollTop() - 1 >= v ? t.addClass("fixed") : t.removeClass("fixed");
  }

  function k(t) {
    var s = e(t + " .uk-slider-nav"),
        i = 100 / s.find("li").length + "%";
    s.css("padding-left", i);
  }

  function g() {
    setTimeout(function () {
      k("#reviews"), k("#blog_articles"), k(".tm-blog-categories");
    }, 100);
  }

  f(), e(window).scroll(function () {
    f();
  }), e("#header ul.menu > li:not(.uk-open)").on("click", function () {
    var t = e(this).offset().top,
        s = e("#header ul.menu>li:first-child").offset().top,
        i = e("#header ul.menu>li.uk-open > ul").height();
    i = void 0 !== i ? i : 0;
    var r = e("#header ul.menu").offset().top,
        l = e(window).width(),
        a = t - r + (r - s) - i;
    l <= 1279 && setTimeout(function () {
      e("#header ul.menu").animate({
        scrollTop: a
      }, 400);
    });
  }), e("#header ul.menu > .menu-item.uk-parent").each(function () {
    e(this).find(".uk-nav-sub > li.uk-active").length > 0 && e(this).addClass("tm-mobile-active");
  }), e(function () {
    e(".uk-slideshow-arrow").addClass("mk-animation"), e(".uk-slideshow-nav").addClass("mk-animation"), e(document).on("beforeitemshow", ".uk-slideshow-items li", function () {
      e(".uk-slideshow-items li.uk-active");
      e(".uk-slideshow").addClass("moving"), e(".uk-slideshow").removeClass(function (e, t) {
        return (t.match(/\bslide-\S+/g) || []).join(" ");
      }), e(".uk-slideshow-arrow").removeClass("mk-animation");
    }), e(document).on("itemshown", ".uk-slideshow-items li", function () {
      e(".uk-slideshow").removeClass("moving");
      var t = e(".uk-slideshow-items li.uk-active");

      switch (e(".uk-slideshow").addClass("slide-" + e(".uk-slideshow-items li").index(t)), e(".it-consulting__approach").removeClass(function (e, t) {
        return (t.match(/\bslide-\S+/g) || []).join(" ");
      }), e(".it-consulting__approach").addClass("slide-" + e(".uk-slideshow-items li").index(t)), e(".uk-slideshow-arrow").addClass("mk-animation"), e(".uk-slideshow-items li").index(t)) {
        case 1:
          e(".header").addClass("uk-text-primary");
          break;

        case 2:
          e(".header").addClass("uk-text-secondary");
          break;

        default:
          e(".header").removeClass("uk-text-secondary"), e(".header").removeClass("uk-text-primary");
      }
    });
  }), g(), e("video").each(function () {
    e(this).get(0).pause();
  }), e(document).on("mouseover", ".review__video-desc", function () {
    var t = e(this).parent().parent();
    t.find("video").get(0).play(), t.addClass("playing");
  }), e(document).on("mouseleave", ".playing .review__video-desc", function () {
    var t = e(this).parent().parent();
    t.find("video").get(0).pause(), t.removeClass("playing");
  }), e(".uk-modal").on({
    "hide.uk.modal": function hideUkModal() {
      e('iframe[src*="https://www.youtube.com/embed/"]').each(function (t) {
        e(this).attr("allow", e(this).attr("allow").replace("autoplay;", "")), e(this).attr("src", e(this).attr("src").replace("?autoplay=1&", "?")), e(this).attr("src", e(this).attr("src").replace("?autoplay=1", ""));
      });
    }
  }), e(".burger-container").on("click", function () {
    e(".header").toggleClass("menu-opened"), e("html").toggleClass("menu-opened"), e(".header").toggleClass("menu-opening"), e(".menu-container").addClass("menu-opening"), setTimeout(function () {
      e(".menu-container").removeClass("menu-opening"), e(".header").removeClass("menu-opening");
    }, 1e3);
  }), e.fn.isInViewport = function () {
    var t = e(this).offset().top,
        s = t + e(this).outerHeight(),
        i = e(window).scrollTop(),
        r = i + e(window).height();
    return s > i && t < r;
  }, e(window).on("resize scroll", function () {
    e(".submenu_link").each(function (t) {
      var s = e(this);

      if (s.isInViewport()) {
        var i = s.attr("id").substr(5);
        e("#header_scroll_nav #link" + i).parent().siblings().find("a").removeClass("active"), e("#header_scroll_nav #link" + i).addClass("active");
      }
    });
  }), e("#header_scroll_nav").on("click", '[href*="#"]', function (t) {
    t.preventDefault();
    var s = e("#header .header").outerHeight(!0);
    e("html,body").stop().animate({
      scrollTop: e(this.hash).offset().top - s - 30
    }, 1e3);
  }), e('a[href^="#"]').on("click", function (t) {
    if (e(this.hash).length > 0 && 1 != this.hash.indexOf("modal")) {
      t.preventDefault();
      var s = e("#header .header").outerHeight(!0);
      e("html,body").stop().animate({
        scrollTop: e(this.hash).offset().top - s - 30
      }, 1e3);
    }
  }), e(".scroll_to_top").on("click", function (t) {
    e(".header").hasClass("menu-opened") && e("#burger").click(), e("html,body").stop().animate({
      scrollTop: 0
    }, 1e3);
  }), e(function () {
    var t = e("#header_scroll_nav ul"),
        s = [];
    void 0 !== t && (e(".submenu_link").each(function (t) {
      var i = e(this);

      if (i.attr("id", "ancor" + t), s.push('<li><a id="link' + t + '" href="#ancor' + t + '">' + i.attr("data-title") + "</a></li>"), i.isInViewport()) {
        var r = i.attr("id").substr(5);
        e("#header_scroll_nav #link" + r).addClass("active");
      }
    }), t.append(s));
  });
  var w = !1;
  e("#cases .uk-slider, .cases_slider-container .uk-slider").length && e(window).on("resize scroll load", function () {
    var t = e("#cases .uk-slider, .cases_slider-container .uk-slider");
    t.isInViewport() && !0 !== w && (w = !0, t.attr("uk-slider", t.attr("uk-slider") + "autoplay: true;"));
  });
  var y = !1;
  e("#it-consulting_slideshow").length && e(window).on("resize scroll load", function () {
    var t = e("#it-consulting_slideshow");
    t.isInViewport() && !0 !== y && (y = !0, t.attr("uk-slideshow", t.attr("uk-slideshow") + "autoplay: true;"));
  });
  var b = !1;
  e(".slider-years-nav").length && e(window).on("resize scroll load", function () {
    var t = e(".slider-years-nav");
    t.isInViewport() && !0 !== b && (b = !0, t.find(".timeline-slideshow").attr("uk-slideshow", t.find(".timeline-slideshow").attr("uk-slideshow") + "autoplay: true;"));
  });
  var C = !1;
  e(".more-screens-list").length && e(window).on("resize scroll load", function () {
    var t = e(".more-screens-list");
    t.isInViewport() && !0 !== C && (C = !0, t.attr("uk-slider", t.attr("uk-slider") + "autoplay: true;"));
  });

  function _(t, s) {
    e(s).on("click swipe touchstart", function () {
      e(t).attr("uk-slideshow") ? UIkit.slideshow(t).stopAutoplay() : UIkit.slider(t).stopAutoplay();
    });
  }

  e(".peco-demo-video").length && e(window).on("resize scroll load", function () {
    var t = e(".peco-demo-video");
    t.isInViewport() && !0 !== t && (!0, t[0].play());
  }), _("#it-consulting_slideshow", ".it-consulting__approach-items .item, #it-consulting_slideshow .uk-slidenav, #it-consulting_slideshow"), _(".cases_slider-container .uk-slider", ".cases_slider-container .uk-slider"), _(".timeline-slideshow", ".slider-years-nav .arrow-btn, .slider-years-nav .years .year-item"), e(".codedropz-upload-wrapper").bind("DOMSubtreeModified", function () {
    0 == e(".remove-file .spinner").length && e(".remove-file").append('<svg class="spinner" viewBox="0 0 50 50"><circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle></svg>');
  }), UIkit.util.on("#years .uk-slideshow", "beforeitemshow", function (t) {
    var s = t.detail[0].index;
    e(".js-years").css("transform", "rotate(" + (45 - 15 * s) + "deg)"), e(".js-year-item").eq(s).each(function () {
      e.each(this.attributes, function () {
        var t = this.name.split("-")[0];

        if (this.specified && "data" == t) {
          var s = this.name.split("-")[1],
              i = this.value,
              r = e(".js-counter-" + s),
              l = r.text();
          e({
            Counter: l
          }).animate({
            Counter: i
          }, {
            duration: 1e3,
            easing: "swing",
            step: function step() {
              r.text(Math.round(this.Counter));
            }
          });
        }
      });
    });
  });
  var x,
      I = e(".map-markers .marker-item"),
      A = e(".map-markers .marker-item").length,
      q = 0;

  function E() {
    x = setInterval(function () {
      q++, I.removeClass("is-active"), e(".map-markers .marker-item:nth-child(" + q + ")").addClass("is-active"), q == A && (q = 0);
    }, 3e3);
  }

  E(), I.hover(function () {
    clearInterval(x), I.removeClass("is-active");
  }, function () {
    E();
  }), e(".js-counter").each(function () {
    var t = e(this).data("value"),
        s = e(this).data("speed") ? e(this).data("speed") : 3e3;

    if (t > 0) {
      var i = e(this).text() ? e(this).text() : 0,
          r = e(this);
      UIkit.util.on(r, "inview", function () {
        e({
          Counter: i
        }).animate({
          Counter: t
        }, {
          duration: s,
          easing: "swing",
          step: function step() {
            r.text(Math.round(this.Counter));
          },
          complete: function complete() {
            r.addClass("is-complete");
          }
        });
      });
    } else 0 == t && (e(this).text(""), console.log("valueTarget == 0"));
  });
  var S = e(".works-page"),
      U = window.location.hash;

  if (S.length && U && "#all" !== U) {
    U = U.substring(1, U.length);

    var _e = document.querySelector("li[uk-filter-control=\"[data-type*='" + U + "']\"]"),
        _t2 = document.querySelector("li[uk-filter-control=\"[data-type*='" + U + "']\"] > a"),
        _s = document.querySelector("li[uk-filter-control=\"[data-industry*='" + U + "']\"]"),
        _i = document.querySelector("li[uk-filter-control=\"[data-industry*='" + U + "']\"] > a");

    _e ? (_t2.click(), j(_e)) : _s ? (_i.click(), j(_s)) : console.log("No filter " + U + " found!");
  }

  function j(t) {
    F();
    var s = e(".tm-work-filter-controls > li.uk-active");
    s && e(t).parents("li").addClass("tm-open");
    var i = s.find("a").text();
    s.parents(".tm-open").find(".works-items_filter_trigger").text(i);
  }

  function F() {
    var t = e(".tm-work-filter-categories > li.tm-open .works-items_filter_trigger");
    t.text(t.attr("data-label")), e(".tm-work-filter-categories > li.tm-open").removeClass("tm-open");
  }

  var T;
  e(".tm-reset-filter-btn").on("click", function () {
    F(), e(this).addClass("tm-open"), window.location.hash = "all", history.replaceState(null, null, "#all");
  }), e(".tm-work-filter-controls > li").on("click", function () {
    UIkit.dropdown(e(this).parents(".uk-navbar-dropdown")).hide(!1), j(e(this));
    var t = e(this).find("a").text(),
        s = e(this).attr("uk-filter-control"),
        i = s.search("'") + 1,
        r = s.length - 2,
        l = s.substring(i, r);
    window.location.hash = l, history.replaceState(null, null, "#" + l), e(this).parents(".tm-open").find(".works-items_filter_trigger").text(t);
  }), e(".tm-faq-answer-wrapper").on("click", function (e) {
    e.stopPropagation();
  }), e(".we-invest-item").length && e(".we-invest-item").on("mouseover", function () {
    e(".we-invest-item").removeClass("tm-mouseover"), e(this).addClass("tm-mouseover");
  }), (T = e("#mc-embedded-subscribe-form-small")).submit(function (t) {
    t.preventDefault(), function (e) {
      var t = e.find("input[type='email']").val();
      return !(!t || !t.length) && -1 != t.indexOf("@");
    }(T) ? (e("#subscribeFormAlert").html("<p>Subscribing...</p>"), function (t) {
      e.ajax({
        type: "GET",
        url: t.attr("action"),
        data: t.serialize(),
        cache: !1,
        dataType: "jsonp",
        jsonp: "c",
        error: function error(t) {
          e("#subscribeFormAlert").html('<p style="color: #C62828;">Request error. Please contact administrator.</p>');
        },
        success: function success(t) {
          if ("success" != t.result) {
            var s = t.msg || "Oops. Something went wrong. Please try again later.";
            e("#subscribeFormAlert").html('<p style="color: #C62828;">' + s + "</p>");
          } else e("#subscribeFormAlert").html('<p style="color: #69F0AE;">Thank you, your sign-up request was successful! Please check your email inbox to confirm.</p>');

          e(".tm-blog-mailchimp-form-email").val("");
        }
      });
    }(T)) : e("#subscribeFormAlert").html('<p style="color: #C62828;">Please provide a valid email address.</p>');
  }), e(".load-more-items").each(function () {
    var t = e(this),
        s = t.data("load-wrapper"),
        i = e(s).children(".uk-hidden");
    i.length > 0 && (i.slice(0, parseInt(t.data("load-initial"), 10)).removeClass("uk-hidden"), t.click(function () {
      var e = parseInt(t.data("load-more"), 10);
      i.filter(".uk-hidden").slice(0, e).removeClass("uk-hidden"), 0 === i.filter(".uk-hidden").length && t.hide();
    }));
  });
}), document.addEventListener("DOMContentLoaded", function () {
  var e = [].slice.call(document.querySelectorAll("video.lazy"));

  if ("IntersectionObserver" in window) {
    var t = new IntersectionObserver(function (e, s) {
      e.forEach(function (e) {
        if (e.isIntersecting) {
          for (var s in e.target.children) {
            var i = e.target.children[s];
            "string" == typeof i.tagName && "SOURCE" === i.tagName && (i.src = i.dataset.src);
          }

          e.target.load(), e.target.classList.remove("lazy"), t.unobserve(e.target);
        }
      });
    });
    e.forEach(function (e) {
      t.observe(e);
    });
  }
}), jQuery.event.special.touchstart = {
  setup: function setup(e, t, s) {
    this.addEventListener("touchstart", s, {
      passive: !t.includes("noPreventDefault")
    });
  }
}, jQuery.event.special.touchmove = {
  setup: function setup(e, t, s) {
    this.addEventListener("touchmove", s, {
      passive: !t.includes("noPreventDefault")
    });
  }
}, jQuery.event.special.wheel = {
  setup: function setup(e, t, s) {
    this.addEventListener("wheel", s, {
      passive: !0
    });
  }
}, jQuery.event.special.mousewheel = {
  setup: function setup(e, t, s) {
    this.addEventListener("mousewheel", s, {
      passive: !0
    });
  }
}, function (e) {
  var t = e('a[href^="mailto:"]:not(.tm-uk-icon)');
  t.length && t.each(function (t, s) {
    var i = e(s);
    i.attr("href", i.attr("href").replace("MK", "@")), i.text(i.text().replace("MK", "@"));
  });
  var s = e('a[href^="tMK:"]');
  s.length && s.each(function (t, s) {
    var i = e(s);
    i.attr("href", i.attr("href").replace("tMK", "tel"));
  });
}(jQuery), function (e) {
  var t = e("body");
  t.addClass("onready"), e(window).on("load", function () {
    t.addClass("onload");
  });
}(jQuery), function (e) {
  e(".slideshow-container").length && (e(".slideshow-container > .slideshow").addClass("uk-slideshow-items"), UIkit.slideshow(".slideshow-container", {
    animation: "slide",
    ratio: "none",
    height: "740px"
  }));
}(jQuery);